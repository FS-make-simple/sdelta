#!/bin/bash
# sd compression wrapper for sdelta
# Copyright 2005 by Kyle Sallee
# Distributed under the terms of the SPL
# See /usr/share/sdelta/LICENSE


compression()  {
  case  $(  file  -b  "$1"  )  in
          7z*)  echo  "7z"    ;;
       bzip2*)  echo  "bzip2" ;;
        gzip*)  echo  "gzip"  ;;
    compress*)  echo  "gzip"  ;;
        *tar*)  echo  "tar"   ;;
  esac
}


is_sdelta()  {
  file  -b  -m  $SD_MAGIC  "$1"  2>/dev/null  |
  grep  -q  sdelta
}


root()  {
  local  R
         R="${R%.sd}"
         R="${1%.7z}"
         R="${R%.bz2}"
         R="${R%.gz}"
         R="${R/.tgz/.tar}"
  echo "$R"
}


tmp_root()  {
  local  R
         R="$(  root  "$1"  )"
  
  echo "/tmp/${R##*/}.$RANDOM$RANDOM"
}


uncompress()  {
  case  $(  compression    "$1"  )  in
       7z)  7za    x  -so  "$1"  >  $2  2>/dev/null  ;;
    bzip2)  bzip2     -cd  "$1"  >  $2  ;;
     gzip)  gzip      -cd  "$1"  >  $2  ;;
  esac
}


uncompress_name()  {
  local  T
         T="$(  tmp_root  "$1"  )"
  case  $(  compression   "$1"  )  in
       7z)  echo  "$T"  ;;
    bzip2)  echo  "$T"  ;;
     gzip)  echo  "$T"  ;;
        *)  echo  "$1"  ;;
  esac
}


compress()  {
  local  S7Z  SBZ
  local  FBZ  F7Z  TMP  DST

  rm  -f  "$2"

  DST="$2"
  TMP="$2.new"

  case  "${2##*.}"  in
       7z)  7za     a   -si  "$TMP"    <  "$1"  2>/dev/null ;;
      bz2)  bzip2  -9c    >  "$TMP"    <  "$1"  ;;
       gz)  gzip   -9c    >  "$TMP"    <  "$1"  ;;
      tgz)  gzip   -9c    >  "$TMP"    <  "$1"  ;;
      max)  FBZ="${TMP%.*}";  F7Z="${FBZ}.7z";  FBZ="${FBZ}.bz2"
            7za    a    -si  "$F7Z"    <  "$1"  2>/dev/null  &
            bzip2  -9c    >  "$FBZ"    <  "$1"  &
            wait
            S7Z=$( stat      "$F7Z"  -c "%s"  )
            SBZ=$( stat      "$FBZ"  -c "%s"  )
            if    ((  S7Z > SBZ ))
            then  rm  -f  "$F7Z";  TMP="$FBZ";  DST="${2%.*}.bz2"
            else  rm  -f  "$FBZ";  TMP="$F7Z";  DST="${2%.*}.7z"
            fi  ;;
        *)  mv      "$1"     "$TMP"  ;;
  esac  &&  rm  -f  "$1"
  if    [  -f  "$TMP"  ]
  then  mv     "$TMP"  "$DST"
  else  false
  fi
}


guess()  {
  local  R
    R="$(  root  "$1"  )"

    if  [  -f  "$1"            ];  then  echo  "$1"
  elif  [  -f  "$R.tar"        ];  then  echo  "$R.tar"
  elif  [  -f  "$R.tar.7z"     ];  then  echo  "$R.tar.7z"
  elif  [  -f  "$R.tar.bz2"    ];  then  echo  "$R.tar.bz2"
  elif  [  -f  "$R.tar.gz"     ];  then  echo  "$R.tar.gz"
  elif  [  -f  "$R.tgz"        ];  then  echo  "$R.tgz"
  elif  [  -f  "$R.sd.7z"      ];  then  echo  "$R.sd.7z"
  elif  [  -f  "$R.sd.bz2"     ];  then  echo  "$R.sd.bz2"
  elif  [  -f  "$R.sd.gz"      ];  then  echo  "$R.sd.gz"
  elif  [  -f  "$R.7z"         ];  then  echo  "$R.7z"
  elif  [  -f  "$R.bz2"        ];  then  echo  "$R.bz2"
  elif  [  -f  "$R.gz"         ];  then  echo  "$R.gz"
                                   else  echo  "$1 not found.";   exit  1
  fi
}


translate()  {
  if      [   "${1}"      !=  "${2}"      ];  then
    if    [   "${1:0-4}"  ==  "${2:0-4}"  ]
    then  cp  "${1}"          "${2}"
    else
      case  $(  compression    "$1"  )  in
           7z)  7za    x  -so  "$1"  2>/dev/null  ;;
        bzip2)  bzip2     -cd  "$1"  ;;
         gzip)  gzip      -cd  "$1"  ;;
          tar)  cat            "$1"  ;;
      esac  |
      case  "${2##*.}"  in
         7z)  7za     a   -si  "$2"  2>/dev/null ;;
        bz2)  bzip2  -9c    >  "$2"  ;;
         gz)  gzip   -9c    >  "$2"  ;;
        tgz)  gzip   -9c    >  "$2"  ;;
        tar)  cat    -      >  "$2"  ;;
      esac
    fi
  fi
}


if    [  "$1"  == "--help" ]  ||
      ((  $#   <  3       ))
then
  echo      $"sd compression wrapper for sdelta"
  echo      $"Copyright 2005 by Kyle Sallee"
  echo      $"Distributed under the terms of the SPL"
  echo      $"See /usr/share/sdelta/LICENSE"
  echo
  echo  -e  $"To generate a patch file:  \e[32msd  \e[34mold  \e[36mnew    \e[32mpatch\e[0m"
  echo  -e  $"To apply    a patch file:  \e[32msd  \e[34mold  \e[32mpatch  \e[36mnew\e[0m"
  echo      $"Compression types that are automatically detected and supported are:"
  echo       "7za, bzip2, gzip"
  exit  1
elif  [  "$1"  ==  "translate"  ]  &&
      [  -s        "$2"         ]
then  translate    "$2"  "$3"
      exit  0
fi

if    !  [  -f  ${SD_MAGIC:=/usr/share/sdelta/magic}  ]
then              SD_MAGIC=~/usr/share/sdelta/magic
fi

if  !  [[  -f  $SD_MAGIC  ]]
then
  echo  $"Unable to identify sdelta patches without $SD_MAGIC installed."
  echo  $"Please reinstall sdelta or export SD_MAGIC"
  echo  $"to specify the location of the file containing sdelta's magic numbers."
fi


R1="$(  guess            "$1"   )"
R2="$(  guess            "$2"   )"
D1="$(  uncompress_name  "$R1"  )"
D2="$(  uncompress_name  "$R2"  )"

uncompress "$R1"  "$D1"  &
uncompress "$R2"  "$D2"  &

D3="$3"
R3="$(  tmp_root  "$3"  )"

wait

if    is_sdelta  "$D1"
then  R0="$R2";  D0="$D2"
      R2="$R1";  D2="$D1"
      R1="$R0";  D1="$D0"
fi

sdelta  "$D1" "$D2" > "$R3"

RET=$?

if    [  "$R1"  !=  "$D1"  ];  then  rm  -f           "$D1";  fi
if    [  "$R2"  !=  "$D2"  ];  then  rm  -f           "$D2";  fi
if    ((  RET   ==  0     ));  then  compress  "$R3"  "$D3";
                               else  rm  -f    "$R3"       ;  exit  $RET
fi
